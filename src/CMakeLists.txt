
# Copyright (C) 2015 Luke San Antonio
# All rights reserved.

include_directories(${CMAKE_SOURCE_DIR})

find_package(Msgpack REQUIRED)
include_directories(${Msgpack_INCLUDE_DIR})

find_package(LibPNG REQUIRED)
find_package(LibUV REQUIRED)
find_package(GLM REQUIRED)
add_subdirectory(common)

add_subdirectory(io)

#find_package(ENet)
#add_subdirectory(net)

find_package(Sodium)
find_package(mbed)
find_package(Yojimbo)

find_package(Boost REQUIRED COMPONENTS system program_options filesystem)

add_subdirectory(gfx)
add_subdirectory(input)

find_package(LuaJIT REQUIRED)

add_subdirectory(fps)
add_subdirectory(use)
add_subdirectory(assets)

add_subdirectory(effects)

find_package(Bullet REQUIRED)

function(lua_compile_bytecode srcfile outfile)
    # If we are in a debugging mode include debugging information with the
    # bytecode.
    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug" OR
            "${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
        set(flags "-g")
    else ()
        set(flags "")
    endif ()

    # Use the luajit bin to compile native object files for our platform.
    add_custom_command(OUTPUT ${outfile} PRE_LINK COMMAND
            ${LuaJIT_BIN} -b ${flags} "${CMAKE_CURRENT_SOURCE_DIR}/${srcfile}"
            "${CMAKE_CURRENT_BINARY_DIR}/${outfile}"
            MAIN_DEPENDENCY "${srcfile}")
endfunction()

# These are the lua files we want to compile and link into the executable, for
# access by luajit. The file name will the module name put in package.preload
set(REDC_LUAJIT_COMPILED_BYTECODE lua/mesh.obj lua/texture.obj lua/redcrane.obj
        lua/scene.obj lua/shader.obj lua/server.obj lua/text.obj
        lua/config_sandbox.obj)

# This directory isn't automatically made for us
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lua)

set_source_files_properties(${REDC_LUAJIT_COMPILED_BYTECODE} PROPERTIES
        EXTERNAL_OBJECT true GENERATED true)

# Load / compile lua engine code
# Conditionally: Use $CMAKE_BUILD_TYPE to figure out if we want to include
# debugging information in luajit compiled bytecode.
foreach (outfile ${REDC_LUAJIT_COMPILED_BYTECODE})
    get_filename_component(basedir ${outfile} DIRECTORY)
    get_filename_component(basename ${outfile} NAME_WE)
    lua_compile_bytecode("${basedir}/${basename}.lua" "${outfile}")
endforeach ()

function(lua_compile_header name)
    set(varname "REDC_LUA_${name}_BYTECODE")
    set("${varname}" "lua_${name}_bytecode.h")
    lua_compile_bytecode("lua/${name}.lua" "${${varname}}")
    set("${varname}" "${${varname}}" PARENT_SCOPE)
endfunction()

# This is for generating a sandbox
lua_compile_header(sandbox)
lua_compile_header(run_engine)
lua_compile_header(init_engine)
lua_compile_header(redc_ffi)

add_executable(redc main.cpp minilua.cpp sdl_helper.cpp player.cpp
        cwrap/engine.cpp cwrap/mesh.cpp cwrap/scene.cpp
        cwrap/shader.cpp cwrap/redcrane.cpp cwrap/map.cpp cwrap/text.cpp
        cwrap/server.cpp cwrap/texture.cpp map.cpp common/timed_text.cpp
        ${CMAKE_CURRENT_BINARY_DIR}/${REDC_LUA_config_sandbox_BYTECODE}
        ${CMAKE_CURRENT_BINARY_DIR}/${REDC_LUA_sandbox_BYTECODE}
        ${CMAKE_CURRENT_BINARY_DIR}/${REDC_LUA_run_engine_BYTECODE}
        ${CMAKE_CURRENT_BINARY_DIR}/${REDC_LUA_init_engine_BYTECODE}
        ${CMAKE_CURRENT_BINARY_DIR}/${REDC_LUA_redc_ffi_BYTECODE}
        ${REDC_LUAJIT_COMPILED_BYTECODE})

# Make sure we can headers generated by luajit
target_include_directories(redc PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

# We are using the C linker of course
set_target_properties(redc PROPERTIES LINKER_LANGUAGE C)

add_data(ffi_decl_header ALL share/${PROJECT_NAME}/src redcrane_decl.h)
add_dependencies(redc ffi_decl_header)

target_include_directories(redc PUBLIC
        ${Yojimbo_INCLUDE_DIR}
        ${SDL2_INCLUDE_DIRS}
        ${BULLET_INCLUDE_DIRS})
target_link_libraries(redc PUBLIC
        commonlib gfxlib gfxextralib uselib iolib
        fpslib inputlib effectslib SoloudStatic
        freetype-gl
        ${Yojimbo_LIBRARY}
        ${Sodium_LIBRARY}
        ${mbedcrypto_LIBRARY}
        ${mbedtls_LIBRARY}
        ${Boost_SYSTEM_LIBRARY}
        ${Boost_PROGRAM_OPTIONS_LIBRARY}
        ${Boost_FILESYSTEM_LIBRARY}
        ${SDL2_LIBRARIES} ${BULLET_LIBRARIES})

target_link_libraries(redc PUBLIC ${LuaJIT_LIBRARY})
target_include_directories(redc PUBLIC ${LuaJIT_INCLUDE_DIR})
target_compile_options(redc PUBLIC ${LuaJIT_COMPILE_OPTIONS})

add_dependencies(redc survival)
add_dependencies(redc broomgame)
add_dependencies(redc assets)

add_executable(test_cel main_cel.cpp sdl_helper.cpp)

target_include_directories(test_cel PUBLIC ${SDL2_INCLUDE_DIRS}
        ${BULLET_INCLUDE_DIRS})

target_link_libraries(test_cel PUBLIC commonlib gfxlib uselib fpslib
        inputlib
        ${Boost_SYSTEM_LIBRARY}
        ${Boost_PROGRAM_OPTIONS_LIBRARY}
        ${Boost_FILESYSTEM_LIBRARY}
        ${SDL2_LIBRARIES}
        ${BULLET_LIBRARIES})

add_executable(load_gltf load_gltf.cpp sdl_helper.cpp)
target_link_libraries(load_gltf assetslib commonlib gfxlib ${SDL2_LIBRARIES})
target_include_directories(load_gltf PUBLIC ${SDL2_INCLUDE_DIRS})

add_executable(test_deferred main_deferred.cpp sdl_helper.cpp)
target_link_libraries(test_deferred
        assetslib
        commonlib
        gfxlib
        effectslib
        ${SDL2_LIBRARIES})

target_include_directories(test_deferred PUBLIC ${SDL2_INCLUDE_DIRS})

#add_executable(sword_select main_sword.cpp)
#target_link_libraries(sword_select
#  assetslib
#  commonlib
#  gfxlib
#  ${SDL2_LIBRARIES})

#target_include_directories(sword_select PUBLIC ${SDL2_INCLUDE_DIRS})
