
# Copyright (C) 2015 Luke San Antonio
# All rights reserved.

include_directories(${CMAKE_SOURCE_DIR})

find_package(Threads REQUIRED)

find_package(Msgpack REQUIRED)
include_directories(${Msgpack_INCLUDE_DIR})

find_package(LibPNG REQUIRED)
find_package(LibUV REQUIRED)
find_package(GLM REQUIRED)
add_subdirectory(common)
add_subdirectory(io)

find_package(ENet REQUIRED)
add_subdirectory(net)

find_package(Boost REQUIRED COMPONENTS system program_options filesystem)

find_package(SDL2 REQUIRED)
add_subdirectory(gfx)
add_subdirectory(input)

find_package(LuaJIT REQUIRED)
find_package(Freetype REQUIRED)

add_subdirectory(fps)
add_subdirectory(use)
add_subdirectory(assets)

# These are just here for testing, not that they need to be tested if they
# aren't used.
add_subdirectory(terrain)
add_subdirectory(collisionlib)
add_subdirectory(gen)

find_package(Bullet REQUIRED)

function(lua_compile_bytecode srcfile outfile)
    # If we are in a debugging mode include debugging information with the
    # bytecode.
    if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug" OR
        "${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
        set(flags "-g")
    else()
        set(flags "")
    endif()

    # Use the luajit bin to compile native object files for our platform.
    add_custom_command(OUTPUT ${outfile} PRE_LINK COMMAND
            ${LuaJIT_BIN} -b ${flags} "${CMAKE_CURRENT_SOURCE_DIR}/${srcfile}"
                                      "${CMAKE_CURRENT_BINARY_DIR}/${outfile}"
            MAIN_DEPENDENCY "${srcfile}")
endfunction()

# These are the lua files we want to compile and link into the executable, for
# access by luajit. The file name will the module name put in package.preload
set(REDC_LUAJIT_COMPILED_BYTECODE lua/mesh_pool.obj
                                  lua/redcrane.obj
                                  lua/scene.obj
                                  lua/shader.obj)

# This directory isn't automatically made for us
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lua)

set_source_files_properties(${REDC_LUAJIT_COMPILED_BYTECODE} PROPERTIES
                            EXTERNAL_OBJECT true GENERATED true)

# Load / compile lua engine code
# Conditionally: Use $CMAKE_BUILD_TYPE to figure out if we want to include
# debugging information in luajit compiled bytecode.
foreach(outfile ${REDC_LUAJIT_COMPILED_BYTECODE})
    get_filename_component(basedir ${outfile} DIRECTORY)
    get_filename_component(basename ${outfile} NAME_WE)
    lua_compile_bytecode("${basedir}/${basename}.lua" "${outfile}")
endforeach()

# This is for generating a sandbox
set(REDC_LUA_SANDBOX_BYTECODE "lua_sandbox_bytecode.h")
lua_compile_bytecode("lua/sandbox.lua" ${REDC_LUA_SANDBOX_BYTECODE})

add_executable(redc main.cpp minilua.cpp sdl_helper.cpp player.cpp
                    cwrap/engine.cpp cwrap/mesh.cpp cwrap/scene.cpp
                    cwrap/shader.cpp cwrap/redcrane.cpp
                    ${CMAKE_CURRENT_BINARY_DIR}/${REDC_LUA_SANDBOX_BYTECODE}
                    ${REDC_LUAJIT_COMPILED_BYTECODE})

# Make sure we can headers generated by luajit
target_include_directories(redc PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

# We are using the C linker of course
set_target_properties(redc PROPERTIES LINKER_LANGUAGE C)

add_data(ffi_decl_header ALL share/${PROJECT_NAME}/src redcrane_decl.h)
add_dependencies(redc ffi_decl_header)

target_include_directories(redc PUBLIC ${SDL2_INCLUDE_DIRS}
                                       ${BULLET_INCLUDE_DIRS})

target_link_libraries(redc PUBLIC commonlib netlib gfxlib uselib fpslib
                                  inputlib
                                  ${Boost_SYSTEM_LIBRARY}
                                  ${Boost_PROGRAM_OPTIONS_LIBRARY}
                                  ${Boost_FILESYSTEM_LIBRARY}
                                  ${SDL2_LIBRARIES}
                                  ${BULLET_LIBRARIES})

target_link_libraries(redc PUBLIC ${LuaJIT_LIBRARY})
target_include_directories(redc PUBLIC ${LuaJIT_INCLUDE_DIR})
target_compile_options(redc PUBLIC ${LuaJIT_COMPILE_OPTIONS})

add_dependencies(redc survival)
add_dependencies(redc assets)
